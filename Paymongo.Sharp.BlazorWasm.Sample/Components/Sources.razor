@using LumexUI
@using LumexUI.Common
@using Paymongo.Sharp.BlazorWasm.Sample.Models
@using Paymongo.Sharp.Core.Entities
@using Paymongo.Sharp.Core.Enums
@using Paymongo.Sharp.Features.Links.Contracts
@using Paymongo.Sharp.Features.Payments.Contracts
@using Paymongo.Sharp.Features.Sources.Contracts
@using Paymongo.Sharp.Utilities

<LumexCard>
    <LumexCardBody Class="flex flex-col gap-6">
        <div class="flex flex-col">
            <h3 class="text-lg font-medium my-auto flex-grow-1">Sources Api Payment Test (Deprecated)</h3>
            <p class="opacity-70 text-sm">Try a test payment using the Sources api. Complete the transaction in the new tab</p>
        </div>
        <div class="flex flex-col gap-3">
            <LumexNumbox TValue="decimal" Required="@true"
                         Disabled="@_isProcessing"
                         @bind-Value="@_amount"
                         StartContent="@_currency"
                         Type="@InputType.Text"
                         Label="Payment Amount"
                         LabelPlacement="LabelPlacement.Outside"
                         Description="Any amount from 100.00 to 100,000.00"
                         Placeholder="pk_test_123ABC"/>
            <div class="flex flex-col">
                <LumexSelect TValue="SourceType"
                             Required="true"
                             Disabled="@_isProcessing"
                             Description="Only supports GCash or GrabPay"
                             Placeholder="Select a source type"
                             @bind-Value="@_sourceType">
                    <LumexSelectItem @key="@SourceType.GCash" Value="@SourceType.GCash">
                        GCash
                    </LumexSelectItem>
                    <LumexSelectItem @key="@SourceType.GrabPay" Value="@SourceType.GrabPay">
                        Grab Pay
                    </LumexSelectItem>
                </LumexSelect>
            </div>
        </div>
        @if (_alert is not null)
        {
            @_alert
        }
        <div class="flex gap-3">
            <LumexButton Disabled="@_isProcessing" OnClick="@Pay" Color="@ThemeColor.Primary" Class="flex gap-1">
                @if (_isProcessing)
                {
                    <LumexSpinner Variant="@SpinnerVariant.Ring" Color="@ThemeColor.Default" Size="@Size.Small" />
                    <span class="font-medium">Waiting for Payment</span>
                }
                else
                {
                    <span class="font-medium">Pay now</span>
                }
            </LumexButton>
        </div>
    </LumexCardBody>
</LumexCard>

@inject IJSRuntime JsRuntime

@code {
    
    private readonly RenderFragment _currency = @<p>₱</p>;
    private RenderFragment? _alert;
    
    private decimal _amount = 599;
    private SourceType _sourceType = SourceType.GCash;

    private Payment? _payment;
    private bool _isProcessing;
    
    [CascadingParameter]
    public PaymongoConfig Config { get; set; }
    
    async Task Pay()
    {
        if (string.IsNullOrEmpty(Config.SecretKey))
        {
            _alert = @<LumexAlert Closeable="true" OnClose="@ClearAlerts" Color="ThemeColor.Danger" Title="Secret Key missing. Please configure the Secret Key in the settings panel."/>;
            return;
        }
        
        _alert = null;
        _isProcessing = true;
        
        var amount = _amount.ToLongAmount();
        var paymongoClient = new PaymongoClient(Config.SecretKey);
        
        var link = new Source
        {
            Data = new SourceData()
            {
                Attributes = new SourceAttributes()
                {
                    Description = "Test Source Payment",
                    Amount = amount,
                    Currency = Currency.Php,
                    Type = _sourceType,
                    Billing = new Billing {
                        Name = "TestName",
                        Email = "test@paymongo.com",
                        Phone = "9734534443",
                        Address = new Address {
                            Line1 = "TestAddress1",
                            Line2 = "TestAddress2",
                            PostalCode = "4506",
                            State = "TestState",
                            City = "TestCity",
                            Country = "PH"
                        }
                    },
                    Redirect = new Redirect {
                        Success = "https://paymongo.com",
                        Failed = "https://paymongo.com"
                    }
                }
            }
        };

        var result = await paymongoClient.Sources.CreateSourceAsync(link);
        await JsRuntime.InvokeVoidAsync("open", result.Data.Attributes.Redirect.CheckoutUrl, "_blank");

        while (true)
        {
            try
            {
                var getSourceResult = await paymongoClient.Sources.RetrieveSourceAsync(result.Data.Id);
                if (getSourceResult.Data.Attributes.Status is not SourceStatus.Chargeable)
                {
                    await Task.Delay(500);
                    continue;
                }

                _payment = new Payment()
                {
                    Data = new PaymentData()
                    {
                        Attributes = new PaymentAttributes()
                        {
                            PaidAt = DateTime.Now,
                            Source = new PaymentSource()
                            {
                                Type = getSourceResult.Data.Attributes.Type.ToString()
                            }
                        }
                    }
                };
                break;
            }
            catch (Exception)
            {
                await Task.Delay(500);
            }
        }

        _isProcessing = false;
        _alert = @<LumexAlert Closeable="true" OnClose="@ClearPaymentInfo" Color="ThemeColor.Success" Title="@($"Paid in full on {_payment.Data.Attributes.PaidAt} using {_payment.Data.Attributes.Source?.Type}")"/>;
    }
    
    private void ClearAlerts()
    {
        _alert = null;
    }

    private void ClearPaymentInfo()
    {
        _payment = null;
        _alert = null;
    }

}