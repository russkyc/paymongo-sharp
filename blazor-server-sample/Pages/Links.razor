@page "/links"
@using System.Text.Json
@using Paymongo.Sharp.Interfaces
@using Paymongo.Sharp.Core.Enums
@using Paymongo.Sharp.Features.Links.Contracts
@using Paymongo.Sharp.Features.Payments.Contracts

@inject IPaymongoClient PaymongoClient
@inject IJSRuntime JsRuntime

<h3>Links</h3>

<button class="btn btn-primary" disabled="@_isProcessing" @onclick="OnPay">Pay with Links API</button>

@if (_isProcessing)
{
    <div class="d-flex flex-row alert alert-secondary mt-3" role="alert">
        <div class="spinner-border text-dark" role="status">
        </div>
        <p class="my-auto mx-2">Waiting for transaction to complete..</p>
    </div>
}
else if (_transactionComplete && _payment is not null)
{
    <div class="alert alert-success mt-3" role="alert">
        Transaction completed! Paid by @_payment.Data.Attributes.Billing?.Name on @_payment.Data.Attributes.PaidAt using @_payment.Data.Attributes.Source?.Type.
    </div>
}

@code {

    private bool _transactionComplete;
    private bool _isProcessing;
    private Payment? _payment;

    async Task OnPay()
    {
        _isProcessing = true;
        Link link = new Link
        {
            Data = new LinkData()
            {
                Attributes = new LinkAttributes()
                {
                    Description = "New Link",
                    Amount = 100000,
                    Currency = Currency.Php
                }
            }
        };

        var linkResult = await PaymongoClient.Links.CreateLinkAsync(link);
        await JsRuntime.InvokeVoidAsync("open", linkResult.Data.Attributes.CheckoutUrl, "_blank");

        while (true)
        {
            try
            {
                var getLinkResult = await PaymongoClient.Links.RetrieveLinkAsync(linkResult.Data.Id);
                if (getLinkResult.Data.Attributes.Status is not LinkStatus.Paid)
                {
                    await Task.Delay(500);
                    continue;
                }

                _payment = getLinkResult.Data.Attributes.Payments.First(payment => payment.Data.Attributes.Status is PaymentStatus.Paid);
                break;
            }
            catch (Exception)
            {
                await Task.Delay(500);
            }
        }

        _transactionComplete = true;
        _isProcessing = false;
    }

}