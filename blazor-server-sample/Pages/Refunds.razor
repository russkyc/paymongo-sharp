@page "/refunds"
@using Paymongo.Sharp.Core.Enums
@using Paymongo.Sharp.Features.Refunds.Entities
@using Paymongo.Sharp.Interfaces
@inject IPaymongoClient PaymongoClient

<h3>Refunds</h3>

<!-- Section for creating a refund -->
<div class="card mb-4">
    <div class="card-header">Request a Refund</div>
    <div class="card-body">
        <div>
            <label>Payment ID:</label>
            <input type="text" @bind="_paymentId" class="form-control" />
        </div>
        <div>
            <label>Refund Amount:</label>
            <input type="number" @bind="_refundAmount" class="form-control" />
        </div>
        <div>
            <label>Reason:</label>
            <select @bind="_refundReason" class="form-control">
                <option>Select a reason</option>
                <option value="@RefundReason.Duplicate.ToString()">Duplicate</option>
                <option value="@RefundReason.Fraudulent.ToString()">Fraudulent</option>
                <option value="@RefundReason.RequestedByCustomer.ToString()">Requested by Customer</option>
            </select>
        </div>

        <button disabled="@_isProcessing" class="btn btn-primary mt-2" @onclick="OnRefund">Request Refund</button>
    </div>
</div>

@if (_isProcessing)
{
    <div class="d-flex flex-row alert alert-secondary mt-3" role="alert">
        <div class="spinner-border text-dark" role="status"></div>
        <p class="my-auto mx-2">Processing refund request...</p>
    </div>
}
else if (_refundProcessed && _processedRefund != null)
{
    <div class="alert alert-success mt-3" role="alert">
        Refund processed successfully! Amount refunded: @_processedRefund.Amount.
    </div>
}
else if (_refunded)
{
    <div class="alert alert-danger mt-3" role="alert">
        Error processing refund. Payment already refunded.
    </div>
}

<!-- Section to retrieve a refund by ID -->
<div class="card mb-4">
    <div class="card-header">Retrieve a Refund</div>
    <div class="card-body">
        <div>
            <label>Refund ID:</label>
            <input type="text" @bind="_refundId" class="form-control" />
        </div>

        <button class="btn btn-secondary mt-2" @onclick="RetrieveRefund">Retrieve Refund</button>

        @if (_retrievedRefund != null)
        {
            <div class="alert alert-info mt-3" role="alert">
                <h5>Refund Details</h5>
                <p><strong>ID:</strong> @_retrievedRefund.Id</p>
                <p><strong>Amount:</strong> @_retrievedRefund.Amount</p>
                <p><strong>Status:</strong> @_retrievedRefund.Status</p>
                <p><strong>Reason:</strong> @_retrievedRefund.Reason</p>
                <p><strong>Notes:</strong> @_retrievedRefund.Notes</p>
                <p><strong>Currency:</strong> @_retrievedRefund.Currency</p>
                <p><strong>Payment ID:</strong> @_retrievedRefund.PaymentId</p>
                <p><strong>Created At:</strong> @_retrievedRefund.CreatedAt</p>
            </div>
        }
    </div>
</div>

<!-- Section to list all refunds -->
<div class="card mb-4">
    <div class="card-header">All Refunds</div>
    <div class="card-body">
        <button class="btn btn-info mb-2" @onclick="ListAllRefunds">Load All Refunds</button>
        @if (_refundsList.Any())
        {
            <ul class="list-group">
                @foreach (var refund in _refundsList)
                {
                    <li class="list-group-item">
                        <p><strong>ID:</strong> @refund.Id</p>
                        <p><strong>Amount:</strong> @refund.Amount</p>
                        <p><strong>Status:</strong> @refund.Status</p>
                        <p><strong>Reason:</strong> @refund.Reason</p>
                        <p><strong>Notes:</strong> @refund.Notes</p>
                        <p><strong>Currency:</strong> @refund.Currency</p>
                        <p><strong>Payment ID:</strong> @refund.PaymentId</p>
                        <p><strong>Created At:</strong> @refund.CreatedAt</p>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No refunds found.</p>
        }
    </div>
</div>

@code {
    private bool _isProcessing;
    private bool _refundProcessed;
    private bool _refunded;
    private Refund? _processedRefund;
    private Refund? _retrievedRefund;
    private IEnumerable<Refund> _refundsList = [];

    private string? _paymentId;
    private int _refundAmount;
    private RefundReason? _refundReason;

    private string? _refundId;

    // Method to create a refund
    async Task OnRefund()
    {
        _isProcessing = true;
        _refundProcessed = false;
        _refunded = false;

        try
        {
            var refund = new Refund
            {
                PaymentId = _paymentId,
                Amount = _refundAmount,
                Notes = "Test refund",
                Currency = Currency.Php,
                Reason = _refundReason
            };

            _processedRefund = await PaymongoClient.Refunds.CreateRefundAsync(refund);
            _refundProcessed = true;
        }
        catch (Exception ex)
        {
            _refunded = true;
            Console.WriteLine($"Error processing refund: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
        }
    }

    // Method to retrieve a specific refund by ID
    async Task RetrieveRefund()
    {
        if (string.IsNullOrEmpty(_refundId)) return;
        try
        {
            _retrievedRefund = await PaymongoClient.Refunds.RetrieveRefundAsync(_refundId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving refund: {ex.Message}");
        }
    }

    // Method to list all refunds
    async Task ListAllRefunds()
    {
        try
        {
            _refundsList = await PaymongoClient.Refunds.ListAllRefundsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error listing refunds: {ex.Message}");
        }
    }
}