@page "/checkouts"
@using Paymongo.Sharp.Interfaces
@using Paymongo.Sharp.Core.Enums
@using Paymongo.Sharp.Features.Checkouts.Contracts
@using Paymongo.Sharp.Features.Payments.Contracts

@inject IPaymongoClient PaymongoClient
@inject IJSRuntime JsRuntime

<h3>Checkouts</h3>

<button disabled="@_isProcessing" class="btn btn-primary" @onclick="OnPay">Pay with Checkout API</button>

@if (_isProcessing)
{
    <div class="d-flex flex-row alert alert-secondary mt-3" role="alert">
        <div class="spinner-border text-dark" role="status">
        </div>
        <p class="my-auto mx-2">Waiting for transaction to complete..</p>
    </div>
}
else if (_transactionComplete && _payment is not null)
{
    <div class="alert alert-success mt-3" role="alert">
        Transaction completed! Paid by @_payment.Attributes.Billing?.Name on @_payment.Attributes.PaidAt using @_payment.Attributes.Source?.Type.
    </div>
}

@code {

    private bool _transactionComplete;
    private bool _isProcessing;
    private PaymentData? _payment;

    async Task OnPay()
    {
        _isProcessing = true;
        var checkout = new Checkout
        {
            Data = new CheckoutData()
            {
                Attributes = new CheckoutAttributes()
                {
                    Description = "Test Checkout",
                    LineItems = new[]
                    {
                        new LineItem
                        {
                            Name = "item_name",
                            Quantity = 1,
                            Currency = Currency.Php,
                            Amount = 3500
                        }
                    },
                    PaymentMethodTypes = new[]
                    {
                        PaymentMethodType.GCash,
                        PaymentMethodType.Card,
                        PaymentMethodType.Paymaya,
                        PaymentMethodType.BillEase,
                        PaymentMethodType.Dob,
                        PaymentMethodType.GrabPay,
                        PaymentMethodType.DobUbp
                    },
                    SuccessUrl = "https://localhost:7213/success"
                }
            }
        };

        var checkoutResult = await PaymongoClient.Checkouts.CreateCheckoutAsync(checkout);
        await JsRuntime.InvokeVoidAsync("open", checkoutResult.Data.Attributes.CheckoutUrl, "_blank");

        while (true)
        {
            try
            {
                var getCheckoutResult = await PaymongoClient.Checkouts.RetrieveCheckoutAsync(checkoutResult.Data.Id);
                if (getCheckoutResult.Data.Attributes.Payments is null || !getCheckoutResult.Data.Attributes.Payments.Any())
                {
                    await Task.Delay(500);
                    continue;
                }

                // Ideally we would want to get the payment with a Paid status,
                // but, the payment status will only be in Pending in the test environment
                _payment = getCheckoutResult.Data.Attributes.Payments.First(payment => payment.Attributes.Status is PaymentStatus.Paid);
                break;
            }
            catch (Exception)
            {
                await Task.Delay(500);
            }
        }

        _transactionComplete = true;
        _isProcessing = false;
    }

}