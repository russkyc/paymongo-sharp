@page "/sources"
@using Paymongo.Sharp.Interfaces
@using Paymongo.Sharp.Core.Enums
@using Paymongo.Sharp.Core.Entities
@using Paymongo.Sharp.Features.Sources.Entities

@inject IPaymongoClient PaymongoClient
@inject IJSRuntime JsRuntime

<h3>Sources</h3>

<button class="btn btn-primary" disabled="@_isProcessing" @onclick="@(() => OnPay(SourceType.GrabPay))">Pay with GrabPay</button>
<button class="btn btn-primary" disabled="@_isProcessing" @onclick="@(() => OnPay(SourceType.GCash))">Pay with GCash</button>

@if (_isProcessing)
{
    <div class="d-flex flex-row alert alert-secondary mt-3" role="alert">
        <div class="spinner-border text-dark" role="status">
        </div>
        <p class="my-auto mx-2">Waiting for transaction to complete..</p>
    </div>
}
else if (_transactionComplete)
{
    <div class="alert alert-success mt-3" role="alert">
        Transaction completed! Paid by @_source.Billing.Name on @_source.UpdatedAt using @_source.Type.
    </div>
}

@code {
    
    private bool _transactionComplete;
    private bool _isProcessing;
    private Source _source;

    async Task OnPay(SourceType type)
    {
        _isProcessing = true;
        var source = new Source {
            Amount = 100000,
            Billing = new Billing {
                Name = "TestName",
                Email = "test@paymongo.com",
                Phone = "9734534443",
                Address = new Address {
                    Line1 = "TestAddress1",
                    Line2 = "TestAddress2",
                    PostalCode = "4506",
                    State = "TestState",
                    City = "TestCity",
                    Country = "PH"
                }
            },
            Redirect = new Redirect {
                Success = "https://localhost:7213/success",
                Failed = "https://localhost:7213/failed"
            },
            Type = type,
            Currency = Currency.Php
        };
        
        Source sourceResult = await PaymongoClient.Sources.CreateSourceAsync(source);
        await JsRuntime.InvokeVoidAsync("open", sourceResult.Redirect.CheckoutUrl, "_blank");
        
        while (true)
        {
            var getSourceResult = await PaymongoClient.Sources.RetrieveSourceAsync(sourceResult.Id);
            if (getSourceResult.Status is SourceStatus.Chargeable)
            {
                _source = getSourceResult;
                break;
            }
        }
        
        _transactionComplete = true;
        _isProcessing = false;

    }
    
}